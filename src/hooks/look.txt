import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase/SupabaseClient";
import { User } from "@supabase/supabase-js";

interface UserProfile {
    id: string;
    email: string;
    name?: string;
    role?: "landlord" | "student";
    onboarding_complete?: boolean;
}

interface UseAuthResult {
    user: UserProfile | null;
    loading: boolean;
}

export const useAuth = (): UseAuthResult => {
    const [user, setUser] = useState<UserProfile | null>(() => {
        // Load from local storage on initial render
        const storedUser = localStorage.getItem("user");
        return storedUser ? JSON.parse(storedUser) : null;
    });

    const [loading, setLoading] = useState<boolean>(!user); // If user is already in local storage, skip loading

    useEffect(() => {
        const fetchUserProfile = async () => {
            setLoading(true);

            // Get authenticated user
            const { data: { user }, error } = await supabase.auth.getUser();

            if (!user || error) {
                setUser(null);
                localStorage.removeItem("user"); // Clear stored user if auth fails
                setLoading(false);
                return;
            }

            // Fetch user profile from Supabase
            const { data: profile, error: profileError } = await supabase
                .from("profiles")
                .select("id, email, name, role, onboarding_complete")
                .eq("id", user.id)
                .single();

            if (profileError) {
                console.error("Profile fetch error:", profileError.message);
                setUser(null);
                localStorage.removeItem("user");
            } else {
                setUser(profile);
                localStorage.setItem("user", JSON.stringify(profile)); // Save profile in local storage
            }

            setLoading(false);
        };

        // Fetch user data only if not already in local storage
        if (!user) fetchUserProfile();

        // Listen for auth state changes (e.g., login/logout)
        const { data: authListener } = supabase.auth.onAuthStateChange((_, session) => {
            if (session?.user) {
                fetchUserProfile();
            } else {
                setUser(null);
                localStorage.removeItem("user"); // Clear storage on logout
            }
        });

        return () => {
            authListener.subscription.unsubscribe();
        };
    }, []);

    return { user, loading };
};
